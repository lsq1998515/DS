//分解-->合并
void _MergeSort(int* a, int left, int right, int* tmp)
{
	//区间只剩一个元素,不需要分解和归并
	if (left >= right)
	{
		return;
	}
	//分解
	int mid = left + (right - left) / 2;
	_MergeSort(a, left, mid, tmp);
	_MergeSort(a, mid + 1, right, tmp);
 
	//归并
	int begain1 = left; 
	int end1 = mid;
	int begain2 = mid + 1;
	int end2 = right;
	int tmpindex = begain1;
	while (begain1 <= end1 && begain2 <= end2)
	{
		if (a[begain1] <= a[begain2])
		{
			tmp[tmpindex++] = a[begain1++];
		}
		else
		{
			tmp[tmpindex++] = a[begain2++];
		}
	}
	while (begain1 <= end1)
	{
		tmp[tmpindex++] = a[begain1++];
	}
	while (begain2 <= end2)
	{
		tmp[tmpindex++] = a[begain2++];
	}
 
	//拷贝到原有数组对应区间
	memcpy(a + left, tmp + left, (right - left + 1)*sizeof(int));
}
 
void MergeSort(int* a, int n)
{
	int* ret = (int*)malloc(n*sizeof(int));
	_MergeSort(a, 0,  n-1 , ret);
	free(ret);
}
 
int main()
{
	int a[] = { 2, 5, 1, 3, 6, 8, 9, 122, 4, 7 };
	PrintArray(a, 10);
	MergeSort(a, 10);
	PrintArray(a, 10);
	return 0;
}
