//挖坑法:  快排的一次排序-->确定基准值的位置
int PartSort2(int* a, int left, int right)
{
	int mid = getMid(a, left, right);
	Swap(&a[mid], &a[left]);
 
	int key = a[left];
	while (left<right)
	{
		//从右边找小的
		while (left < right && a[right] >= key)
			--right;
		//填坑
		a[left] = a[right];
		//从左边找大的
		while (left < right && a[left] <= key)
			++left;
		a[right] = a[left];
	}
	//左右相遇 存放key 基准值
	a[left] = key;
	return left;
}
//快排  
void QuickSort2(int* a, int left, int right)
{
	if (left >= right)
	{
		return;
	}
	int mid = PartSort2(a, left, right);
	QuickSort2(a, left, mid - 1);
	QuickSort2(a, mid + 1, right);
}
int main()
{
	int a[] = { 2, 5, 1, 3, 6, 8, 9, 122, 4, 7 };
	PrintArray(a, 10);
	QuickSort2(a, 0, 9);
	PrintArray(a, 10);
	return 0;
}
