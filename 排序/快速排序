//快排基本方法
//快排的一次排序:确定基准值的位置  
int PartSort(int* a, int left, int right)
{
	int key = a[left];
	int start = left;
	while (left < right)
	{
		//先从右边找小于key的值
		while (left < right && a[right] >= key)
		{
			--right;
		}
		//从左边找大于key的值
		while (left < right && a[left] <= key)
		{
			++left;
		}
		Swap(&a[left], &a[right]);
	}
	//key位置确定: left ,right 相遇位置
	Swap(&a[start], &a[left]);
	return left;
}
 
//快排  
void QuickSort(int* a, int left, int right)
{
	if (left >= right)
	{
		return;
	}
	int mid = PartSort(a, left, right);
	QuickSort(a, left, mid - 1);
	QuickSort(a, mid + 1, right);
}
int main()
{
	int a[] = { 2, 5, 1, 3, 6, 8, 9, 122, 4, 7 };
	PrintArray(a, 10);
	QuickSort(a, 0, 9);
	PrintArray(a, 10);
	return 0;
}
